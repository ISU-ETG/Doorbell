
ETG_Doorbell.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000005d2  00000666  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000666  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000666  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000696  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a37  00000000  00000000  0000077e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000484  00000000  00000000  000011b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006ca  00000000  00000000  00001639  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000234  00000000  00000000  00001d04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000327  00000000  00000000  00001f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000798  00000000  00000000  0000225f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  000029f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	8f c2       	rjmp	.+1310   	; 0x55c <__vector_15>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a8 30       	cpi	r26, 0x08	; 8
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	91 c2       	rjmp	.+1314   	; 0x5ce <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:




int main(void)
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	00 d0       	rcall	.+0      	; 0xb4 <main+0x6>
  b4:	00 d0       	rcall	.+0      	; 0xb6 <main+0x8>
  b6:	00 d0       	rcall	.+0      	; 0xb8 <main+0xa>
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
	
	SoundPlayer wtvMod;
	
	nav_initPorts();
  bc:	54 d0       	rcall	.+168    	; 0x166 <nav_initPorts>
	SoundPlayer_Init(&wtvMod, &PORTD, 4, 3, 5, 2);
  be:	68 94       	set
  c0:	ee 24       	eor	r14, r14
  c2:	e1 f8       	bld	r14, 1
  c4:	05 e0       	ldi	r16, 0x05	; 5
  c6:	23 e0       	ldi	r18, 0x03	; 3
  c8:	44 e0       	ldi	r20, 0x04	; 4
  ca:	62 e3       	ldi	r22, 0x32	; 50
  cc:	70 e0       	ldi	r23, 0x00	; 0
  ce:	ce 01       	movw	r24, r28
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	6d d1       	rcall	.+730    	; 0x3ae <SoundPlayer_Init>
	
	Joystick_t joystick =NONE;
	DDRE &= ~((1<<6)|(1<<7)); //Signal Inputs
  d4:	82 b1       	in	r24, 0x02	; 2
  d6:	8f 73       	andi	r24, 0x3F	; 63
  d8:	82 b9       	out	0x02, r24	; 2
	
	//debug leds
	DEBUGDDR |= DEBUG1 | DEBUG2;
  da:	e4 e6       	ldi	r30, 0x64	; 100
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	83 60       	ori	r24, 0x03	; 3
  e2:	80 83       	st	Z, r24
	DEBUGPORT |= ~(DEBUG1| DEBUG2);
  e4:	e5 e6       	ldi	r30, 0x65	; 101
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	8c 6f       	ori	r24, 0xFC	; 252
  ec:	80 83       	st	Z, r24

		
		switch(joystick)
		{
			case LEFT:
				DEBUGPORT |= DEBUG1;
  ee:	05 e6       	ldi	r16, 0x65	; 101
  f0:	10 e0       	ldi	r17, 0x00	; 0
				break;
			case RIGHT:
				DEBUGPORT ^= DEBUG1;
  f2:	ff 24       	eor	r15, r15
  f4:	f3 94       	inc	r15
	 int i = 0;
	 
    while(1)
    {
		
		joystick = nav_read();
  f6:	3b d0       	rcall	.+118    	; 0x16e <nav_read>
		uint8_t isBlocked = 0;
		

		
		switch(joystick)
  f8:	83 30       	cpi	r24, 0x03	; 3
  fa:	59 f0       	breq	.+22     	; 0x112 <main+0x64>
  fc:	28 f4       	brcc	.+10     	; 0x108 <main+0x5a>
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	69 f0       	breq	.+26     	; 0x11c <main+0x6e>
 102:	82 30       	cpi	r24, 0x02	; 2
 104:	81 f0       	breq	.+32     	; 0x126 <main+0x78>
 106:	1d c0       	rjmp	.+58     	; 0x142 <main+0x94>
 108:	84 30       	cpi	r24, 0x04	; 4
 10a:	b9 f0       	breq	.+46     	; 0x13a <main+0x8c>
 10c:	85 30       	cpi	r24, 0x05	; 5
 10e:	81 f0       	breq	.+32     	; 0x130 <main+0x82>
 110:	18 c0       	rjmp	.+48     	; 0x142 <main+0x94>
		{
			case LEFT:
				DEBUGPORT |= DEBUG1;
 112:	f8 01       	movw	r30, r16
 114:	80 81       	ld	r24, Z
 116:	81 60       	ori	r24, 0x01	; 1
 118:	80 83       	st	Z, r24
				break;
 11a:	13 c0       	rjmp	.+38     	; 0x142 <main+0x94>
			case RIGHT:
				DEBUGPORT ^= DEBUG1;
 11c:	f8 01       	movw	r30, r16
 11e:	80 81       	ld	r24, Z
 120:	8f 25       	eor	r24, r15
 122:	80 83       	st	Z, r24
				break;
 124:	0e c0       	rjmp	.+28     	; 0x142 <main+0x94>
			case UP:
				DEBUGPORT |= DEBUG2;
 126:	f8 01       	movw	r30, r16
 128:	80 81       	ld	r24, Z
 12a:	82 60       	ori	r24, 0x02	; 2
 12c:	80 83       	st	Z, r24
				break;
 12e:	09 c0       	rjmp	.+18     	; 0x142 <main+0x94>
			case DOWN:
				DEBUGPORT ^= DEBUG2;
 130:	f8 01       	movw	r30, r16
 132:	80 81       	ld	r24, Z
 134:	8e 25       	eor	r24, r14
 136:	80 83       	st	Z, r24
				break;
 138:	04 c0       	rjmp	.+8      	; 0x142 <main+0x94>
			case SEL:
				DEBUGPORT |= (DEBUG1|DEBUG2);
 13a:	f8 01       	movw	r30, r16
 13c:	80 81       	ld	r24, Z
 13e:	83 60       	ori	r24, 0x03	; 3
 140:	80 83       	st	Z, r24
				//DEBUGPORT ^= (DEBUG1);
				break;
		}
		
			//static int i = 0;
			isBlocked = check_Input();
 142:	40 d2       	rcall	.+1152   	; 0x5c4 <check_Input>
			
			
			if(isBlocked)
 144:	88 23       	and	r24, r24
 146:	b9 f2       	breq	.-82     	; 0xf6 <main+0x48>
			{
				SoundPlayer_SetTrack(&wtvMod, 2);
 148:	62 e0       	ldi	r22, 0x02	; 2
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	ce 01       	movw	r24, r28
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	c8 d0       	rcall	.+400    	; 0x2e2 <SoundPlayer_SetTrack>
				Util_WaitMillis(10);
 152:	8a e0       	ldi	r24, 0x0A	; 10
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	90 d1       	rcall	.+800    	; 0x478 <Util_WaitMillis>
				SoundPlayer_Play(&wtvMod);
 158:	ce 01       	movw	r24, r28
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	ca d0       	rcall	.+404    	; 0x2f2 <SoundPlayer_Play>
				Util_WaitMillis(15000);
 15e:	88 e9       	ldi	r24, 0x98	; 152
 160:	9a e3       	ldi	r25, 0x3A	; 58
 162:	8a d1       	rcall	.+788    	; 0x478 <Util_WaitMillis>
 164:	c8 cf       	rjmp	.-112    	; 0xf6 <main+0x48>

00000166 <nav_initPorts>:
#include "joystick.h"

void nav_initPorts(void)
{
	//CLEARBIT(NAVDDR, _bv(PB_DOWN) | _bv(PB_UP) | _bv(PB_RIGHT) | _bv(PB_LEFT) | _bv(PB_SEL));
	NAVDDR &= ~(PB_DOWN | PB_LEFT |PB_RIGHT| PB_UP | PB_SEL); 
 166:	84 b3       	in	r24, 0x14	; 20
 168:	87 70       	andi	r24, 0x07	; 7
 16a:	84 bb       	out	0x14, r24	; 20
 16c:	08 95       	ret

0000016e <nav_read>:
	 
}

Joystick_t nav_read(void)
{
	uint8_t btn = ~NAVPIN;
 16e:	83 b3       	in	r24, 0x13	; 19
 170:	80 95       	com	r24
	Joystick_t joyStick = NONE;
	
	if(btn & PB_DOWN)
 172:	83 fd       	sbrc	r24, 3
 174:	0a c0       	rjmp	.+20     	; 0x18a <nav_read+0x1c>
		joyStick = DOWN;
	else if(btn & PB_RIGHT)
 176:	88 23       	and	r24, r24
 178:	54 f0       	brlt	.+20     	; 0x18e <nav_read+0x20>
		joyStick = RIGHT;
	else if(btn & PB_UP)
 17a:	86 fd       	sbrc	r24, 6
 17c:	0a c0       	rjmp	.+20     	; 0x192 <nav_read+0x24>
		joyStick = UP;
	else if(btn & PB_SEL)
 17e:	84 fd       	sbrc	r24, 4
 180:	0a c0       	rjmp	.+20     	; 0x196 <nav_read+0x28>
		joyStick = SEL;
	else if(btn & PB_LEFT)
 182:	85 fd       	sbrc	r24, 5
 184:	0a c0       	rjmp	.+20     	; 0x19a <nav_read+0x2c>
}

Joystick_t nav_read(void)
{
	uint8_t btn = ~NAVPIN;
	Joystick_t joyStick = NONE;
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	08 95       	ret
	
	if(btn & PB_DOWN)
		joyStick = DOWN;
 18a:	85 e0       	ldi	r24, 0x05	; 5
 18c:	08 95       	ret
	else if(btn & PB_RIGHT)
		joyStick = RIGHT;
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	08 95       	ret
	else if(btn & PB_UP)
		joyStick = UP;
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	08 95       	ret
	else if(btn & PB_SEL)
		joyStick = SEL;
 196:	84 e0       	ldi	r24, 0x04	; 4
 198:	08 95       	ret
	else if(btn & PB_LEFT)
		joyStick = LEFT;
 19a:	83 e0       	ldi	r24, 0x03	; 3
	
	return joyStick;
 19c:	08 95       	ret

0000019e <SoundPlayer_SendCommand>:
void SoundPlayer_Stop(SoundPlayer *sp) {
	SoundPlayer_SendCommand(sp, SP_STOP);
}

void SoundPlayer_SetVolume(SoundPlayer *sp, uint8_t vol) {
	SoundPlayer_SetVolume(sp, SP_VOL(vol));
 19e:	cf 92       	push	r12
 1a0:	df 92       	push	r13
 1a2:	ef 92       	push	r14
 1a4:	ff 92       	push	r15
 1a6:	0f 93       	push	r16
 1a8:	1f 93       	push	r17
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	ec 01       	movw	r28, r24
 1b0:	6b 01       	movw	r12, r22
 1b2:	e8 81       	ld	r30, Y
 1b4:	f9 81       	ldd	r31, Y+1	; 0x01
 1b6:	40 81       	ld	r20, Z
 1b8:	21 e0       	ldi	r18, 0x01	; 1
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	c9 01       	movw	r24, r18
 1be:	0c 80       	ldd	r0, Y+4	; 0x04
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <SoundPlayer_SendCommand+0x28>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	0a 94       	dec	r0
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <SoundPlayer_SendCommand+0x24>
 1ca:	80 95       	com	r24
 1cc:	84 23       	and	r24, r20
 1ce:	80 83       	st	Z, r24
 1d0:	88 ee       	ldi	r24, 0xE8	; 232
 1d2:	93 e0       	ldi	r25, 0x03	; 3
 1d4:	6a d1       	rcall	.+724    	; 0x4aa <Util_WaitMicros>
 1d6:	dd 20       	and	r13, r13
 1d8:	7c f4       	brge	.+30     	; 0x1f8 <SoundPlayer_SendCommand+0x5a>
 1da:	e8 81       	ld	r30, Y
 1dc:	f9 81       	ldd	r31, Y+1	; 0x01
 1de:	40 81       	ld	r20, Z
 1e0:	21 e0       	ldi	r18, 0x01	; 1
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	c9 01       	movw	r24, r18
 1e6:	0b 80       	ldd	r0, Y+3	; 0x03
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <SoundPlayer_SendCommand+0x50>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	0a 94       	dec	r0
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <SoundPlayer_SendCommand+0x4c>
 1f2:	84 2b       	or	r24, r20
 1f4:	80 83       	st	Z, r24
 1f6:	0e c0       	rjmp	.+28     	; 0x214 <SoundPlayer_SendCommand+0x76>
 1f8:	e8 81       	ld	r30, Y
 1fa:	f9 81       	ldd	r31, Y+1	; 0x01
 1fc:	20 81       	ld	r18, Z
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0b 80       	ldd	r0, Y+3	; 0x03
 204:	02 c0       	rjmp	.+4      	; 0x20a <SoundPlayer_SendCommand+0x6c>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	0a 94       	dec	r0
 20c:	e2 f7       	brpl	.-8      	; 0x206 <SoundPlayer_SendCommand+0x68>
 20e:	80 95       	com	r24
 210:	82 23       	and	r24, r18
 212:	80 83       	st	Z, r24
 214:	88 ee       	ldi	r24, 0xE8	; 232
 216:	93 e0       	ldi	r25, 0x03	; 3
 218:	48 d1       	rcall	.+656    	; 0x4aa <Util_WaitMicros>
 21a:	e8 81       	ld	r30, Y
 21c:	f9 81       	ldd	r31, Y+1	; 0x01
 21e:	40 81       	ld	r20, Z
 220:	21 e0       	ldi	r18, 0x01	; 1
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	c9 01       	movw	r24, r18
 226:	0c 80       	ldd	r0, Y+4	; 0x04
 228:	02 c0       	rjmp	.+4      	; 0x22e <SoundPlayer_SendCommand+0x90>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	0a 94       	dec	r0
 230:	e2 f7       	brpl	.-8      	; 0x22a <SoundPlayer_SendCommand+0x8c>
 232:	84 2b       	or	r24, r20
 234:	80 83       	st	Z, r24
 236:	0e e0       	ldi	r16, 0x0E	; 14
 238:	10 e0       	ldi	r17, 0x00	; 0
 23a:	ee 24       	eor	r14, r14
 23c:	e3 94       	inc	r14
 23e:	f1 2c       	mov	r15, r1
 240:	88 ec       	ldi	r24, 0xC8	; 200
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	32 d1       	rcall	.+612    	; 0x4aa <Util_WaitMicros>
 246:	e8 81       	ld	r30, Y
 248:	f9 81       	ldd	r31, Y+1	; 0x01
 24a:	20 81       	ld	r18, Z
 24c:	c7 01       	movw	r24, r14
 24e:	0c 80       	ldd	r0, Y+4	; 0x04
 250:	02 c0       	rjmp	.+4      	; 0x256 <SoundPlayer_SendCommand+0xb8>
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	0a 94       	dec	r0
 258:	e2 f7       	brpl	.-8      	; 0x252 <SoundPlayer_SendCommand+0xb4>
 25a:	80 95       	com	r24
 25c:	82 23       	and	r24, r18
 25e:	80 83       	st	Z, r24
 260:	c7 01       	movw	r24, r14
 262:	00 2e       	mov	r0, r16
 264:	02 c0       	rjmp	.+4      	; 0x26a <SoundPlayer_SendCommand+0xcc>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	0a 94       	dec	r0
 26c:	e2 f7       	brpl	.-8      	; 0x266 <SoundPlayer_SendCommand+0xc8>
 26e:	8c 21       	and	r24, r12
 270:	9d 21       	and	r25, r13
 272:	89 2b       	or	r24, r25
 274:	69 f0       	breq	.+26     	; 0x290 <SoundPlayer_SendCommand+0xf2>
 276:	e8 81       	ld	r30, Y
 278:	f9 81       	ldd	r31, Y+1	; 0x01
 27a:	20 81       	ld	r18, Z
 27c:	c7 01       	movw	r24, r14
 27e:	0b 80       	ldd	r0, Y+3	; 0x03
 280:	02 c0       	rjmp	.+4      	; 0x286 <SoundPlayer_SendCommand+0xe8>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	0a 94       	dec	r0
 288:	e2 f7       	brpl	.-8      	; 0x282 <SoundPlayer_SendCommand+0xe4>
 28a:	82 2b       	or	r24, r18
 28c:	80 83       	st	Z, r24
 28e:	0d c0       	rjmp	.+26     	; 0x2aa <SoundPlayer_SendCommand+0x10c>
 290:	e8 81       	ld	r30, Y
 292:	f9 81       	ldd	r31, Y+1	; 0x01
 294:	20 81       	ld	r18, Z
 296:	c7 01       	movw	r24, r14
 298:	0b 80       	ldd	r0, Y+3	; 0x03
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <SoundPlayer_SendCommand+0x102>
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	0a 94       	dec	r0
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <SoundPlayer_SendCommand+0xfe>
 2a4:	80 95       	com	r24
 2a6:	82 23       	and	r24, r18
 2a8:	80 83       	st	Z, r24
 2aa:	88 ec       	ldi	r24, 0xC8	; 200
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	fd d0       	rcall	.+506    	; 0x4aa <Util_WaitMicros>
 2b0:	e8 81       	ld	r30, Y
 2b2:	f9 81       	ldd	r31, Y+1	; 0x01
 2b4:	20 81       	ld	r18, Z
 2b6:	c7 01       	movw	r24, r14
 2b8:	0c 80       	ldd	r0, Y+4	; 0x04
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <SoundPlayer_SendCommand+0x122>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	0a 94       	dec	r0
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <SoundPlayer_SendCommand+0x11e>
 2c4:	82 2b       	or	r24, r18
 2c6:	80 83       	st	Z, r24
 2c8:	01 50       	subi	r16, 0x01	; 1
 2ca:	11 09       	sbc	r17, r1
 2cc:	08 f0       	brcs	.+2      	; 0x2d0 <SoundPlayer_SendCommand+0x132>
 2ce:	b8 cf       	rjmp	.-144    	; 0x240 <SoundPlayer_SendCommand+0xa2>
 2d0:	df 91       	pop	r29
 2d2:	cf 91       	pop	r28
 2d4:	1f 91       	pop	r17
 2d6:	0f 91       	pop	r16
 2d8:	ff 90       	pop	r15
 2da:	ef 90       	pop	r14
 2dc:	df 90       	pop	r13
 2de:	cf 90       	pop	r12
 2e0:	08 95       	ret

000002e2 <SoundPlayer_SetTrack>:
 2e2:	61 15       	cp	r22, r1
 2e4:	22 e0       	ldi	r18, 0x02	; 2
 2e6:	72 07       	cpc	r23, r18
 2e8:	10 f0       	brcs	.+4      	; 0x2ee <SoundPlayer_SetTrack+0xc>
 2ea:	6f ef       	ldi	r22, 0xFF	; 255
 2ec:	71 e0       	ldi	r23, 0x01	; 1
 2ee:	57 cf       	rjmp	.-338    	; 0x19e <SoundPlayer_SendCommand>
 2f0:	08 95       	ret

000002f2 <SoundPlayer_Play>:
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	ec 01       	movw	r28, r24
 2f8:	6e ef       	ldi	r22, 0xFE	; 254
 2fa:	7f ef       	ldi	r23, 0xFF	; 255
 2fc:	50 df       	rcall	.-352    	; 0x19e <SoundPlayer_SendCommand>
 2fe:	62 e3       	ldi	r22, 0x32	; 50
 300:	70 e0       	ldi	r23, 0x00	; 0
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	f3 d0       	rcall	.+486    	; 0x4ec <Util_BlockWhile>
 306:	e8 81       	ld	r30, Y
 308:	f9 81       	ldd	r31, Y+1	; 0x01
 30a:	32 97       	sbiw	r30, 0x02	; 2
 30c:	80 81       	ld	r24, Z
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0d 80       	ldd	r0, Y+5	; 0x05
 312:	02 c0       	rjmp	.+4      	; 0x318 <SoundPlayer_Play+0x26>
 314:	95 95       	asr	r25
 316:	87 95       	ror	r24
 318:	0a 94       	dec	r0
 31a:	e2 f7       	brpl	.-8      	; 0x314 <SoundPlayer_Play+0x22>
 31c:	21 e0       	ldi	r18, 0x01	; 1
 31e:	82 27       	eor	r24, r18
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	70 e0       	ldi	r23, 0x00	; 0
 324:	81 70       	andi	r24, 0x01	; 1
 326:	e2 d0       	rcall	.+452    	; 0x4ec <Util_BlockWhile>
 328:	81 11       	cpse	r24, r1
 32a:	ed cf       	rjmp	.-38     	; 0x306 <SoundPlayer_Play+0x14>
 32c:	e8 81       	ld	r30, Y
 32e:	f9 81       	ldd	r31, Y+1	; 0x01
 330:	21 e0       	ldi	r18, 0x01	; 1
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	0d 80       	ldd	r0, Y+5	; 0x05
 336:	02 c0       	rjmp	.+4      	; 0x33c <SoundPlayer_Play+0x4a>
 338:	22 0f       	add	r18, r18
 33a:	33 1f       	adc	r19, r19
 33c:	0a 94       	dec	r0
 33e:	e2 f7       	brpl	.-8      	; 0x338 <SoundPlayer_Play+0x46>
 340:	32 97       	sbiw	r30, 0x02	; 2
 342:	80 81       	ld	r24, Z
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	82 23       	and	r24, r18
 348:	93 23       	and	r25, r19
 34a:	89 2b       	or	r24, r25
 34c:	d1 f7       	brne	.-12     	; 0x342 <SoundPlayer_Play+0x50>
 34e:	8a e0       	ldi	r24, 0x0A	; 10
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	92 d0       	rcall	.+292    	; 0x478 <Util_WaitMillis>
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	08 95       	ret

0000035a <SoundPlayer_Reset>:
}

void SoundPlayer_Reset(SoundPlayer *sp) {
 35a:	0f 93       	push	r16
 35c:	1f 93       	push	r17
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	ec 01       	movw	r28, r24
	CLEAR_BIT(sp->port, sp->resetPin);
 364:	e8 81       	ld	r30, Y
 366:	f9 81       	ldd	r31, Y+1	; 0x01
 368:	20 81       	ld	r18, Z
 36a:	01 e0       	ldi	r16, 0x01	; 1
 36c:	10 e0       	ldi	r17, 0x00	; 0
 36e:	c8 01       	movw	r24, r16
 370:	0a 80       	ldd	r0, Y+2	; 0x02
 372:	02 c0       	rjmp	.+4      	; 0x378 <SoundPlayer_Reset+0x1e>
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	0a 94       	dec	r0
 37a:	e2 f7       	brpl	.-8      	; 0x374 <SoundPlayer_Reset+0x1a>
 37c:	80 95       	com	r24
 37e:	82 23       	and	r24, r18
 380:	80 83       	st	Z, r24
	
	Util_WaitMillis(100);
 382:	84 e6       	ldi	r24, 0x64	; 100
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	78 d0       	rcall	.+240    	; 0x478 <Util_WaitMillis>
	
	SET_BIT(sp->port, sp->resetPin);
 388:	e8 81       	ld	r30, Y
 38a:	f9 81       	ldd	r31, Y+1	; 0x01
 38c:	80 81       	ld	r24, Z
 38e:	0a 80       	ldd	r0, Y+2	; 0x02
 390:	02 c0       	rjmp	.+4      	; 0x396 <SoundPlayer_Reset+0x3c>
 392:	00 0f       	add	r16, r16
 394:	11 1f       	adc	r17, r17
 396:	0a 94       	dec	r0
 398:	e2 f7       	brpl	.-8      	; 0x392 <SoundPlayer_Reset+0x38>
 39a:	08 2b       	or	r16, r24
 39c:	00 83       	st	Z, r16
	
	Util_WaitMillis(800);
 39e:	80 e2       	ldi	r24, 0x20	; 32
 3a0:	93 e0       	ldi	r25, 0x03	; 3
 3a2:	6a d0       	rcall	.+212    	; 0x478 <Util_WaitMillis>
}
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	1f 91       	pop	r17
 3aa:	0f 91       	pop	r16
 3ac:	08 95       	ret

000003ae <SoundPlayer_Init>:
 * Created: 11/11/2015 3:47:14 PM
 *  Author: Eric
 */ 
#include "SoundPlayer.h"

void SoundPlayer_Init(SoundPlayer *sp, volatile uint8_t *port, uint8_t resetPin, uint8_t dataPin, uint8_t clockPin, uint8_t busyPin) {
 3ae:	ef 92       	push	r14
 3b0:	ff 92       	push	r15
 3b2:	0f 93       	push	r16
 3b4:	cf 93       	push	r28
 3b6:	df 93       	push	r29
 3b8:	ec 01       	movw	r28, r24
 3ba:	fb 01       	movw	r30, r22
	sp->port = port;
 3bc:	79 83       	std	Y+1, r23	; 0x01
 3be:	68 83       	st	Y, r22
	sp->dataPin = dataPin;
 3c0:	2b 83       	std	Y+3, r18	; 0x03
	sp->resetPin = resetPin;
 3c2:	4a 83       	std	Y+2, r20	; 0x02
	sp->clockPin = clockPin;
 3c4:	0c 83       	std	Y+4, r16	; 0x04
	sp->busyPin = busyPin;
 3c6:	ed 82       	std	Y+5, r14	; 0x05
	
	//DDR register is adjacent to the associated PORT
	SET_BIT(&DDRD, resetPin);
 3c8:	31 b3       	in	r19, 0x11	; 17
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	bc 01       	movw	r22, r24
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <SoundPlayer_Init+0x28>
 3d2:	66 0f       	add	r22, r22
 3d4:	77 1f       	adc	r23, r23
 3d6:	4a 95       	dec	r20
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <SoundPlayer_Init+0x24>
 3da:	ab 01       	movw	r20, r22
 3dc:	43 2b       	or	r20, r19
 3de:	41 bb       	out	0x11, r20	; 17
	SET_BIT(&DDRD, dataPin);
 3e0:	41 b3       	in	r20, 0x11	; 17
 3e2:	bc 01       	movw	r22, r24
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <SoundPlayer_Init+0x3c>
 3e6:	66 0f       	add	r22, r22
 3e8:	77 1f       	adc	r23, r23
 3ea:	2a 95       	dec	r18
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <SoundPlayer_Init+0x38>
 3ee:	9b 01       	movw	r18, r22
 3f0:	34 2f       	mov	r19, r20
 3f2:	32 2b       	or	r19, r18
 3f4:	31 bb       	out	0x11, r19	; 17
	CLEAR_BIT(&DDRD, busyPin);
 3f6:	31 b3       	in	r19, 0x11	; 17
 3f8:	ac 01       	movw	r20, r24
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <SoundPlayer_Init+0x52>
 3fc:	44 0f       	add	r20, r20
 3fe:	55 1f       	adc	r21, r21
 400:	ea 94       	dec	r14
 402:	e2 f7       	brpl	.-8      	; 0x3fc <SoundPlayer_Init+0x4e>
 404:	7a 01       	movw	r14, r20
 406:	e0 94       	com	r14
 408:	3e 21       	and	r19, r14
 40a:	31 bb       	out	0x11, r19	; 17
	
	SET_BIT(&DDRD, clockPin);
 40c:	31 b3       	in	r19, 0x11	; 17
 40e:	02 c0       	rjmp	.+4      	; 0x414 <SoundPlayer_Init+0x66>
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	0a 95       	dec	r16
 416:	e2 f7       	brpl	.-8      	; 0x410 <SoundPlayer_Init+0x62>
 418:	93 2f       	mov	r25, r19
 41a:	98 2b       	or	r25, r24
 41c:	91 bb       	out	0x11, r25	; 17
	SET_BIT(port, clockPin);
 41e:	90 81       	ld	r25, Z
 420:	89 2b       	or	r24, r25
 422:	80 83       	st	Z, r24
	CLEAR_BIT(port, dataPin);
 424:	80 81       	ld	r24, Z
 426:	20 95       	com	r18
 428:	28 23       	and	r18, r24
 42a:	20 83       	st	Z, r18
	CLEAR_BIT(port, busyPin);
 42c:	80 81       	ld	r24, Z
 42e:	e8 22       	and	r14, r24
 430:	e0 82       	st	Z, r14
	
	Util_Init();
 432:	0b d0       	rcall	.+22     	; 0x44a <Util_Init>
	
	Util_WaitMillis(10);
 434:	8a e0       	ldi	r24, 0x0A	; 10
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	1f d0       	rcall	.+62     	; 0x478 <Util_WaitMillis>
	SoundPlayer_Reset(sp);
 43a:	ce 01       	movw	r24, r28
 43c:	8e df       	rcall	.-228    	; 0x35a <SoundPlayer_Reset>
	
}
 43e:	df 91       	pop	r29
 440:	cf 91       	pop	r28
 442:	0f 91       	pop	r16
 444:	ff 90       	pop	r15
 446:	ef 90       	pop	r14
 448:	08 95       	ret

0000044a <Util_Init>:

volatile unsigned long ms;

void Util_Init(void)
{
	cli();
 44a:	f8 94       	cli
	
	TCCR0 = (1<<CS02);	//clk/8 for 1MHZ internal
 44c:	84 e0       	ldi	r24, 0x04	; 4
 44e:	83 bf       	out	0x33, r24	; 51
	OCR0 = 250; 
 450:	8a ef       	ldi	r24, 0xFA	; 250
 452:	81 bf       	out	0x31, r24	; 49
	TIMSK |= (1<<OCIE0);  
 454:	87 b7       	in	r24, 0x37	; 55
 456:	82 60       	ori	r24, 0x02	; 2
 458:	87 bf       	out	0x37, r24	; 55
	
	TCCR1A = 0X00; //Timer stopped
 45a:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0X00;
 45c:	1e bc       	out	0x2e, r1	; 46
	
	//TIMSK |=  (1<<OCIE2);
	
	sei();
 45e:	78 94       	sei
 460:	08 95       	ret

00000462 <Util_GetMillis>:
}

unsigned long Util_GetMillis() {
	unsigned long millis;
	
	cli();
 462:	f8 94       	cli
	millis = ms;
 464:	60 91 04 01 	lds	r22, 0x0104
 468:	70 91 05 01 	lds	r23, 0x0105
 46c:	80 91 06 01 	lds	r24, 0x0106
 470:	90 91 07 01 	lds	r25, 0x0107
	sei();
 474:	78 94       	sei
	
	return millis;
}
 476:	08 95       	ret

00000478 <Util_WaitMillis>:

void Util_WaitMillis(unsigned int millis) {
 478:	cf 92       	push	r12
 47a:	df 92       	push	r13
 47c:	ef 92       	push	r14
 47e:	ff 92       	push	r15
 480:	7c 01       	movw	r14, r24
	unsigned long endTime = millis + Util_GetMillis();
 482:	ef df       	rcall	.-34     	; 0x462 <Util_GetMillis>
 484:	9b 01       	movw	r18, r22
 486:	ac 01       	movw	r20, r24
 488:	2e 0d       	add	r18, r14
 48a:	3f 1d       	adc	r19, r15
 48c:	41 1d       	adc	r20, r1
 48e:	51 1d       	adc	r21, r1
 490:	69 01       	movw	r12, r18
 492:	7a 01       	movw	r14, r20
	
	while(Util_GetMillis() < endTime);
 494:	e6 df       	rcall	.-52     	; 0x462 <Util_GetMillis>
 496:	6c 15       	cp	r22, r12
 498:	7d 05       	cpc	r23, r13
 49a:	8e 05       	cpc	r24, r14
 49c:	9f 05       	cpc	r25, r15
 49e:	d0 f3       	brcs	.-12     	; 0x494 <Util_WaitMillis+0x1c>
}
 4a0:	ff 90       	pop	r15
 4a2:	ef 90       	pop	r14
 4a4:	df 90       	pop	r13
 4a6:	cf 90       	pop	r12
 4a8:	08 95       	ret

000004aa <Util_WaitMicros>:

void Util_WaitMicros(unsigned int micros) {
	uint16_t end = micros << 1;
 4aa:	88 0f       	add	r24, r24
 4ac:	99 1f       	adc	r25, r25
	
	TCNT3 = 0;
 4ae:	e8 e8       	ldi	r30, 0x88	; 136
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	11 82       	std	Z+1, r1	; 0x01
 4b4:	10 82       	st	Z, r1
	TCCR3B = (1 << CS21); // No prescalar for 1MHZ clk.
 4b6:	22 e0       	ldi	r18, 0x02	; 2
 4b8:	20 93 8a 00 	sts	0x008A, r18
	
	while(TCNT3 < end)
 4bc:	20 81       	ld	r18, Z
 4be:	31 81       	ldd	r19, Z+1	; 0x01
 4c0:	28 17       	cp	r18, r24
 4c2:	39 07       	cpc	r19, r25
 4c4:	68 f4       	brcc	.+26     	; 0x4e0 <Util_WaitMicros+0x36>
	{
		SET_BIT(&DEBUGPORT, 0); //Debug1
 4c6:	e5 e6       	ldi	r30, 0x65	; 101
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
	uint16_t end = micros << 1;
	
	TCNT3 = 0;
	TCCR3B = (1 << CS21); // No prescalar for 1MHZ clk.
	
	while(TCNT3 < end)
 4ca:	a8 e8       	ldi	r26, 0x88	; 136
 4cc:	b0 e0       	ldi	r27, 0x00	; 0
	{
		SET_BIT(&DEBUGPORT, 0); //Debug1
 4ce:	20 81       	ld	r18, Z
 4d0:	21 60       	ori	r18, 0x01	; 1
 4d2:	20 83       	st	Z, r18
	uint16_t end = micros << 1;
	
	TCNT3 = 0;
	TCCR3B = (1 << CS21); // No prescalar for 1MHZ clk.
	
	while(TCNT3 < end)
 4d4:	2d 91       	ld	r18, X+
 4d6:	3c 91       	ld	r19, X
 4d8:	11 97       	sbiw	r26, 0x01	; 1
 4da:	28 17       	cp	r18, r24
 4dc:	39 07       	cpc	r19, r25
 4de:	b8 f3       	brcs	.-18     	; 0x4ce <Util_WaitMicros+0x24>
	{
		SET_BIT(&DEBUGPORT, 0); //Debug1
	}
	CLEAR_BIT(&DEBUGPORT, 0);
 4e0:	e5 e6       	ldi	r30, 0x65	; 101
 4e2:	f0 e0       	ldi	r31, 0x00	; 0
 4e4:	80 81       	ld	r24, Z
 4e6:	8e 7f       	andi	r24, 0xFE	; 254
 4e8:	80 83       	st	Z, r24
 4ea:	08 95       	ret

000004ec <Util_BlockWhile>:

//Call once with a non-zero timeout to start the timer
//Then each subsequent call with a zero timeout value
//will return true if condition and the time since the first
//call is less than the timeout amount, otherwise false
uint8_t Util_BlockWhile(uint8_t condition, uint16_t timeout) {
 4ec:	cf 92       	push	r12
 4ee:	df 92       	push	r13
 4f0:	ef 92       	push	r14
 4f2:	ff 92       	push	r15
 4f4:	0f 93       	push	r16
 4f6:	1f 93       	push	r17
 4f8:	cf 93       	push	r28
 4fa:	c8 2f       	mov	r28, r24
 4fc:	8b 01       	movw	r16, r22
	static uint32_t endTime = 0;
	//uint32_t startTime = Util_GetMillis();
	
	if(timeout) {
 4fe:	61 15       	cp	r22, r1
 500:	71 05       	cpc	r23, r1
 502:	79 f0       	breq	.+30     	; 0x522 <Util_BlockWhile+0x36>
		endTime = Util_GetMillis() + timeout;
 504:	ae df       	rcall	.-164    	; 0x462 <Util_GetMillis>
 506:	ab 01       	movw	r20, r22
 508:	bc 01       	movw	r22, r24
 50a:	40 0f       	add	r20, r16
 50c:	51 1f       	adc	r21, r17
 50e:	61 1d       	adc	r22, r1
 510:	71 1d       	adc	r23, r1
 512:	40 93 00 01 	sts	0x0100, r20
 516:	50 93 01 01 	sts	0x0101, r21
 51a:	60 93 02 01 	sts	0x0102, r22
 51e:	70 93 03 01 	sts	0x0103, r23
	}
	
	return condition && Util_GetMillis() < endTime;
 522:	cc 23       	and	r28, r28
 524:	91 f0       	breq	.+36     	; 0x54a <Util_BlockWhile+0x5e>
 526:	9d df       	rcall	.-198    	; 0x462 <Util_GetMillis>
 528:	21 e0       	ldi	r18, 0x01	; 1
 52a:	c0 90 00 01 	lds	r12, 0x0100
 52e:	d0 90 01 01 	lds	r13, 0x0101
 532:	e0 90 02 01 	lds	r14, 0x0102
 536:	f0 90 03 01 	lds	r15, 0x0103
 53a:	6c 15       	cp	r22, r12
 53c:	7d 05       	cpc	r23, r13
 53e:	8e 05       	cpc	r24, r14
 540:	9f 05       	cpc	r25, r15
 542:	08 f0       	brcs	.+2      	; 0x546 <Util_BlockWhile+0x5a>
 544:	20 e0       	ldi	r18, 0x00	; 0
 546:	82 2f       	mov	r24, r18
 548:	01 c0       	rjmp	.+2      	; 0x54c <Util_BlockWhile+0x60>
 54a:	80 e0       	ldi	r24, 0x00	; 0
}
 54c:	cf 91       	pop	r28
 54e:	1f 91       	pop	r17
 550:	0f 91       	pop	r16
 552:	ff 90       	pop	r15
 554:	ef 90       	pop	r14
 556:	df 90       	pop	r13
 558:	cf 90       	pop	r12
 55a:	08 95       	ret

0000055c <__vector_15>:

ISR(TIMER0_COMP_vect) {
 55c:	1f 92       	push	r1
 55e:	0f 92       	push	r0
 560:	0f b6       	in	r0, 0x3f	; 63
 562:	0f 92       	push	r0
 564:	11 24       	eor	r1, r1
 566:	0b b6       	in	r0, 0x3b	; 59
 568:	0f 92       	push	r0
 56a:	8f 93       	push	r24
 56c:	9f 93       	push	r25
 56e:	af 93       	push	r26
 570:	bf 93       	push	r27
 572:	ef 93       	push	r30
 574:	ff 93       	push	r31
	TCNT0 = 0;
 576:	12 be       	out	0x32, r1	; 50
	ms++;
 578:	80 91 04 01 	lds	r24, 0x0104
 57c:	90 91 05 01 	lds	r25, 0x0105
 580:	a0 91 06 01 	lds	r26, 0x0106
 584:	b0 91 07 01 	lds	r27, 0x0107
 588:	01 96       	adiw	r24, 0x01	; 1
 58a:	a1 1d       	adc	r26, r1
 58c:	b1 1d       	adc	r27, r1
 58e:	80 93 04 01 	sts	0x0104, r24
 592:	90 93 05 01 	sts	0x0105, r25
 596:	a0 93 06 01 	sts	0x0106, r26
 59a:	b0 93 07 01 	sts	0x0107, r27
	DEBUGPORT ^= DEBUG2;
 59e:	e5 e6       	ldi	r30, 0x65	; 101
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	90 81       	ld	r25, Z
 5a4:	82 e0       	ldi	r24, 0x02	; 2
 5a6:	89 27       	eor	r24, r25
 5a8:	80 83       	st	Z, r24
}
 5aa:	ff 91       	pop	r31
 5ac:	ef 91       	pop	r30
 5ae:	bf 91       	pop	r27
 5b0:	af 91       	pop	r26
 5b2:	9f 91       	pop	r25
 5b4:	8f 91       	pop	r24
 5b6:	0f 90       	pop	r0
 5b8:	0b be       	out	0x3b, r0	; 59
 5ba:	0f 90       	pop	r0
 5bc:	0f be       	out	0x3f, r0	; 63
 5be:	0f 90       	pop	r0
 5c0:	1f 90       	pop	r1
 5c2:	18 95       	reti

000005c4 <check_Input>:

//Return true if light is being blocked
uint8_t check_Input(void)
{
	uint8_t laserPin = (PINE & (1<<6));
 5c4:	81 b1       	in	r24, 0x01	; 1
	uint8_t isBlocked = 0;
	
	isBlocked = (laserPin ? 1 : 0);
	
	return isBlocked;
 5c6:	86 fb       	bst	r24, 6
 5c8:	88 27       	eor	r24, r24
 5ca:	80 f9       	bld	r24, 0
 5cc:	08 95       	ret

000005ce <_exit>:
 5ce:	f8 94       	cli

000005d0 <__stop_program>:
 5d0:	ff cf       	rjmp	.-2      	; 0x5d0 <__stop_program>
