
ETG_Doorbell.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000de  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000048  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000014f  00000000  00000000  000001ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000ed  00000000  00000000  00000319  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001ca  00000000  00000000  00000406  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000058  00000000  00000000  000005d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000162  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000002a  00000000  00000000  0000078a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	1f c0       	rjmp	.+62     	; 0xda <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:

int main(void)
{
	//nav_initPorts();
	uint8_t buttons = 0;
	DDRC &= ~(PB_DOWN | PB_LEFT |PB_RIGHT| PB_UP | PB_SEL); 
  9e:	84 b3       	in	r24, 0x14	; 20
  a0:	87 70       	andi	r24, 0x07	; 7
  a2:	84 bb       	out	0x14, r24	; 20
	
	//debug leds
	DDRG |= DEBUG1 | DEBUG2;
  a4:	e4 e6       	ldi	r30, 0x64	; 100
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	83 60       	ori	r24, 0x03	; 3
  ac:	80 83       	st	Z, r24
	PORTG &= ~(DEBUG1| DEBUG2);
  ae:	e5 e6       	ldi	r30, 0x65	; 101
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	8c 7f       	andi	r24, 0xFC	; 252
  b6:	80 83       	st	Z, r24
	//DEBUGPORT &= _bv(DEBUG1) | _bv(DEBUG2);
	buttons = (PORTG & 0x80);
  b8:	80 81       	ld	r24, Z
		if(buttons & PB_SEL)
		{
			DEBUGPORT |= DEBUG1;	
		}else
		{
			DEBUGPORT &= ~DEBUG1;
  ba:	c5 e6       	ldi	r28, 0x65	; 101
  bc:	d0 e0       	ldi	r29, 0x00	; 0
	buttons = (PORTG & 0x80);
	
	 
    while(1)
    {
		buttons = nav_read();
  be:	0a d0       	rcall	.+20     	; 0xd4 <nav_read>
		if(buttons & PB_SEL)
  c0:	84 ff       	sbrs	r24, 4
  c2:	04 c0       	rjmp	.+8      	; 0xcc <main+0x2e>
		{
			DEBUGPORT |= DEBUG1;	
  c4:	88 81       	ld	r24, Y
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	88 83       	st	Y, r24
  ca:	f9 cf       	rjmp	.-14     	; 0xbe <main+0x20>
		}else
		{
			DEBUGPORT &= ~DEBUG1;
  cc:	88 81       	ld	r24, Y
  ce:	8e 7f       	andi	r24, 0xFE	; 254
  d0:	88 83       	st	Y, r24
  d2:	f5 cf       	rjmp	.-22     	; 0xbe <main+0x20>

000000d4 <nav_read>:
	DDRC &= ~(PB_DOWN | PB_LEFT |PB_RIGHT| PB_UP | PB_SEL);  
}

uint8_t nav_read(void)
{
	return (PINC & 0xF8);
  d4:	83 b3       	in	r24, 0x13	; 19
	
}
  d6:	88 7f       	andi	r24, 0xF8	; 248
  d8:	08 95       	ret

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
