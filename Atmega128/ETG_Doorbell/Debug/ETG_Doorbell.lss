
ETG_Doorbell.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000104  00000178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000104  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000048  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000016f  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000010d  00000000  00000000  0000035f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001f8  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000058  00000000  00000000  00000664  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000165  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000006c  00000000  00000000  00000821  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  0000088d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	32 c0       	rjmp	.+100    	; 0x100 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#define DEBUGDDR	DDRG

int main(void)
{
	uint8_t navButtons = 0;
	nav_initPorts();
  9e:	29 d0       	rcall	.+82     	; 0xf2 <nav_initPorts>
	
	//debug leds
	DEBUGDDR |= DEBUG1 | DEBUG2;
  a0:	e4 e6       	ldi	r30, 0x64	; 100
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	83 60       	ori	r24, 0x03	; 3
  a8:	80 83       	st	Z, r24
	DEBUGPORT |= (DEBUG1| DEBUG2);
  aa:	e5 e6       	ldi	r30, 0x65	; 101
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	83 60       	ori	r24, 0x03	; 3
  b2:	80 83       	st	Z, r24
	 int i = 0;
	 
    while(1)
    {
		navButtons = nav_read();
		if(navButtons == 0xF0)DEBUGPORT ^= DEBUG1;
  b4:	c5 e6       	ldi	r28, 0x65	; 101
  b6:	d0 e0       	ldi	r29, 0x00	; 0
  b8:	ff 24       	eor	r15, r15
  ba:	f3 94       	inc	r15
#define DEBUG2		_bv(PG1)
#define DEBUGPORT	PORTG
#define DEBUGDDR	DDRG

int main(void)
{
  bc:	00 e1       	ldi	r16, 0x10	; 16
  be:	17 e2       	ldi	r17, 0x27	; 39
	
	 int i = 0;
	 
    while(1)
    {
		navButtons = nav_read();
  c0:	1c d0       	rcall	.+56     	; 0xfa <nav_read>
		if(navButtons == 0xF0)DEBUGPORT ^= DEBUG1;
  c2:	80 3f       	cpi	r24, 0xF0	; 240
  c4:	19 f4       	brne	.+6      	; 0xcc <main+0x2e>
  c6:	98 81       	ld	r25, Y
  c8:	9f 25       	eor	r25, r15
  ca:	98 83       	st	Y, r25
#define DEBUG2		_bv(PG1)
#define DEBUGPORT	PORTG
#define DEBUGDDR	DDRG

int main(void)
{
  cc:	20 2f       	mov	r18, r16
  ce:	31 2f       	mov	r19, r17
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	31 09       	sbc	r19, r1
	 
    while(1)
    {
		navButtons = nav_read();
		if(navButtons == 0xF0)DEBUGPORT ^= DEBUG1;
		for(i=0; i < 10000; i ++);
  d4:	21 15       	cp	r18, r1
  d6:	31 05       	cpc	r19, r1
  d8:	d9 f7       	brne	.-10     	; 0xd0 <main+0x32>
		
		switch(navButtons)
  da:	88 30       	cpi	r24, 0x08	; 8
  dc:	31 f0       	breq	.+12     	; 0xea <main+0x4c>
  de:	88 3e       	cpi	r24, 0xE8	; 232
  e0:	79 f7       	brne	.-34     	; 0xc0 <main+0x22>
		{
			case (~PB_SEL)& PB_MASK:
				DEBUGPORT ^= DEBUG1;
  e2:	88 81       	ld	r24, Y
  e4:	8f 25       	eor	r24, r15
  e6:	88 83       	st	Y, r24
				break;
  e8:	eb cf       	rjmp	.-42     	; 0xc0 <main+0x22>
			
			case PB_LEFT: 
				DEBUGPORT |= DEBUG2;
  ea:	88 81       	ld	r24, Y
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	88 83       	st	Y, r24
				break;
  f0:	e7 cf       	rjmp	.-50     	; 0xc0 <main+0x22>

000000f2 <nav_initPorts>:
#include "navButtons.h"

void nav_initPorts(void)
{
	//CLEARBIT(NAVDDR, _bv(PB_DOWN) | _bv(PB_UP) | _bv(PB_RIGHT) | _bv(PB_LEFT) | _bv(PB_SEL));
	NAVDDR &= ~(PB_DOWN | PB_LEFT |PB_RIGHT| PB_UP | PB_SEL);  
  f2:	84 b3       	in	r24, 0x14	; 20
  f4:	87 70       	andi	r24, 0x07	; 7
  f6:	84 bb       	out	0x14, r24	; 20
  f8:	08 95       	ret

000000fa <nav_read>:
}

uint8_t nav_read(void)
{
	return (PINC & 0xF8);
  fa:	83 b3       	in	r24, 0x13	; 19
	
}
  fc:	88 7f       	andi	r24, 0xF8	; 248
  fe:	08 95       	ret

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
