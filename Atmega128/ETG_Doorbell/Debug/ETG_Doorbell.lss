
ETG_Doorbell.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000672  00000706  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000672  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000706  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000706  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000140  00000000  00000000  00000736  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000eb4  00000000  00000000  00000876  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b7  00000000  00000000  0000172a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000928  00000000  00000000  00001ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e4  00000000  00000000  0000260c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a8  00000000  00000000  000028f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008bf  00000000  00000000  00002c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  00003557  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ed c2       	rjmp	.+1498   	; 0x618 <__vector_15>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e7       	ldi	r30, 0x72	; 114
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 30       	cpi	r26, 0x08	; 8
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	d4 c2       	rjmp	.+1448   	; 0x66e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
#include "lcd.h"



int main(void)
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	00 d0       	rcall	.+0      	; 0xce <main+0x6>
  ce:	00 d0       	rcall	.+0      	; 0xd0 <main+0x8>
  d0:	00 d0       	rcall	.+0      	; 0xd2 <main+0xa>
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
	
	SoundPlayer wtvMod;
	
	nav_initPorts();
  d6:	61 d0       	rcall	.+194    	; 0x19a <nav_initPorts>
//	Util_Init();
	SoundPlayer_Init(&wtvMod, &PORTD, 4, 3, 5, 2);
  d8:	68 94       	set
  da:	ee 24       	eor	r14, r14
  dc:	e1 f8       	bld	r14, 1
  de:	05 e0       	ldi	r16, 0x05	; 5
  e0:	23 e0       	ldi	r18, 0x03	; 3
  e2:	44 e0       	ldi	r20, 0x04	; 4
  e4:	62 e3       	ldi	r22, 0x32	; 50
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	ce 01       	movw	r24, r28
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	ce d1       	rcall	.+924    	; 0x48a <SoundPlayer_Init>
	Joystick_t joystick =NONE;
	
	//debug leds
	DDRE &= ~((1<<6)|(1<<7)); //Signal Inputs
  ee:	82 b1       	in	r24, 0x02	; 2
  f0:	8f 73       	andi	r24, 0x3F	; 63
  f2:	82 b9       	out	0x02, r24	; 2
	DEBUGDDR |= DEBUG1 | DEBUG2;
  f4:	e4 e6       	ldi	r30, 0x64	; 100
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	83 60       	ori	r24, 0x03	; 3
  fc:	80 83       	st	Z, r24
	DEBUGPORT &= ~(DEBUG1| DEBUG2);
  fe:	e5 e6       	ldi	r30, 0x65	; 101
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	8c 7f       	andi	r24, 0xFC	; 252
 106:	80 83       	st	Z, r24
	Util_WaitMillis(100);
 108:	84 e6       	ldi	r24, 0x64	; 100
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	23 d2       	rcall	.+1094   	; 0x554 <Util_WaitMillis>
	lcd_init();
 10e:	7a d0       	rcall	.+244    	; 0x204 <lcd_init>
	Util_WaitMillis(100);
 110:	84 e6       	ldi	r24, 0x64	; 100
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	1f d2       	rcall	.+1086   	; 0x554 <Util_WaitMillis>
	lcd_clear();
 116:	73 d0       	rcall	.+230    	; 0x1fe <lcd_clear>

		
		switch(joystick)
		{
			case LEFT:
				DEBUGPORT |= DEBUG1;
 118:	05 e6       	ldi	r16, 0x65	; 101
 11a:	10 e0       	ldi	r17, 0x00	; 0
				break;
			case SEL:
				DEBUGPORT |= (DEBUG1|DEBUG2);
				break;
			default:
				DEBUGPORT ^= (DEBUG1); //heartbeat
 11c:	ff 24       	eor	r15, r15
 11e:	f3 94       	inc	r15
	 
    while(1)
    {
		//DEBUGPORT ^= (DEBUG2); //heartbeat
		//lcd_putc('a');
		joystick = nav_read();
 120:	40 d0       	rcall	.+128    	; 0x1a2 <nav_read>
		uint8_t isBlocked = 0;
		

		
		switch(joystick)
 122:	83 30       	cpi	r24, 0x03	; 3
 124:	59 f0       	breq	.+22     	; 0x13c <main+0x74>
 126:	28 f4       	brcc	.+10     	; 0x132 <main+0x6a>
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	69 f0       	breq	.+26     	; 0x146 <main+0x7e>
 12c:	82 30       	cpi	r24, 0x02	; 2
 12e:	81 f0       	breq	.+32     	; 0x150 <main+0x88>
 130:	1e c0       	rjmp	.+60     	; 0x16e <main+0xa6>
 132:	84 30       	cpi	r24, 0x04	; 4
 134:	b9 f0       	breq	.+46     	; 0x164 <main+0x9c>
 136:	85 30       	cpi	r24, 0x05	; 5
 138:	81 f0       	breq	.+32     	; 0x15a <main+0x92>
 13a:	19 c0       	rjmp	.+50     	; 0x16e <main+0xa6>
		{
			case LEFT:
				DEBUGPORT |= DEBUG1;
 13c:	f8 01       	movw	r30, r16
 13e:	80 81       	ld	r24, Z
 140:	81 60       	ori	r24, 0x01	; 1
 142:	80 83       	st	Z, r24
				break;
 144:	1b c0       	rjmp	.+54     	; 0x17c <main+0xb4>
			case RIGHT:
				DEBUGPORT ^= DEBUG1;
 146:	f8 01       	movw	r30, r16
 148:	80 81       	ld	r24, Z
 14a:	8f 25       	eor	r24, r15
 14c:	80 83       	st	Z, r24
				break;
 14e:	16 c0       	rjmp	.+44     	; 0x17c <main+0xb4>
			case UP:
				DEBUGPORT |= DEBUG2;
 150:	f8 01       	movw	r30, r16
 152:	80 81       	ld	r24, Z
 154:	82 60       	ori	r24, 0x02	; 2
 156:	80 83       	st	Z, r24
				break;
 158:	11 c0       	rjmp	.+34     	; 0x17c <main+0xb4>
			case DOWN:
				DEBUGPORT ^= DEBUG2;
 15a:	f8 01       	movw	r30, r16
 15c:	80 81       	ld	r24, Z
 15e:	8e 25       	eor	r24, r14
 160:	80 83       	st	Z, r24
				break;
 162:	0c c0       	rjmp	.+24     	; 0x17c <main+0xb4>
			case SEL:
				DEBUGPORT |= (DEBUG1|DEBUG2);
 164:	f8 01       	movw	r30, r16
 166:	80 81       	ld	r24, Z
 168:	83 60       	ori	r24, 0x03	; 3
 16a:	80 83       	st	Z, r24
				break;
 16c:	07 c0       	rjmp	.+14     	; 0x17c <main+0xb4>
			default:
				DEBUGPORT ^= (DEBUG1); //heartbeat
 16e:	f8 01       	movw	r30, r16
 170:	80 81       	ld	r24, Z
 172:	8f 25       	eor	r24, r15
 174:	80 83       	st	Z, r24
				Util_WaitMillis(1000);	//debugging -- turn off
 176:	88 ee       	ldi	r24, 0xE8	; 232
 178:	93 e0       	ldi	r25, 0x03	; 3
 17a:	ec d1       	rcall	.+984    	; 0x554 <Util_WaitMillis>
				break;
		}
		
			//static int i = 0;
			isBlocked = check_Input();
 17c:	73 d2       	rcall	.+1254   	; 0x664 <check_Input>
			
			
			if(isBlocked)
 17e:	88 23       	and	r24, r24
 180:	79 f2       	breq	.-98     	; 0x120 <main+0x58>
			{
				SoundPlayer_SetTrack(&wtvMod, 2);
 182:	62 e0       	ldi	r22, 0x02	; 2
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	ce 01       	movw	r24, r28
 188:	01 96       	adiw	r24, 0x01	; 1
 18a:	19 d1       	rcall	.+562    	; 0x3be <SoundPlayer_SetTrack>
				Util_WaitMillis(10);
 18c:	8a e0       	ldi	r24, 0x0A	; 10
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	e1 d1       	rcall	.+962    	; 0x554 <Util_WaitMillis>
				SoundPlayer_Play(&wtvMod);
 192:	ce 01       	movw	r24, r28
 194:	01 96       	adiw	r24, 0x01	; 1
 196:	1b d1       	rcall	.+566    	; 0x3ce <SoundPlayer_Play>
 198:	c3 cf       	rjmp	.-122    	; 0x120 <main+0x58>

0000019a <nav_initPorts>:
#include "joystick.h"

void nav_initPorts(void)
{
	//CLEARBIT(NAVDDR, _bv(PB_DOWN) | _bv(PB_UP) | _bv(PB_RIGHT) | _bv(PB_LEFT) | _bv(PB_SEL));
	NAVDDR &= ~(PB_DOWN | PB_LEFT |PB_RIGHT| PB_UP | PB_SEL); 
 19a:	84 b3       	in	r24, 0x14	; 20
 19c:	87 70       	andi	r24, 0x07	; 7
 19e:	84 bb       	out	0x14, r24	; 20
 1a0:	08 95       	ret

000001a2 <nav_read>:
	 
}

Joystick_t nav_read(void)
{
	uint8_t btn = ~NAVPIN;
 1a2:	83 b3       	in	r24, 0x13	; 19
 1a4:	80 95       	com	r24
	Joystick_t joyStick = NONE;
	
	if(btn & PB_DOWN)
 1a6:	83 fd       	sbrc	r24, 3
 1a8:	0a c0       	rjmp	.+20     	; 0x1be <nav_read+0x1c>
		joyStick = DOWN;
	else if(btn & PB_RIGHT)
 1aa:	88 23       	and	r24, r24
 1ac:	54 f0       	brlt	.+20     	; 0x1c2 <nav_read+0x20>
		joyStick = RIGHT;
	else if(btn & PB_UP)
 1ae:	86 fd       	sbrc	r24, 6
 1b0:	0a c0       	rjmp	.+20     	; 0x1c6 <nav_read+0x24>
		joyStick = UP;
	else if(btn & PB_SEL)
 1b2:	84 fd       	sbrc	r24, 4
 1b4:	0a c0       	rjmp	.+20     	; 0x1ca <nav_read+0x28>
		joyStick = SEL;
	else if(btn & PB_LEFT)
 1b6:	85 fd       	sbrc	r24, 5
 1b8:	0a c0       	rjmp	.+20     	; 0x1ce <nav_read+0x2c>
}

Joystick_t nav_read(void)
{
	uint8_t btn = ~NAVPIN;
	Joystick_t joyStick = NONE;
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	08 95       	ret
	
	if(btn & PB_DOWN)
		joyStick = DOWN;
 1be:	85 e0       	ldi	r24, 0x05	; 5
 1c0:	08 95       	ret
	else if(btn & PB_RIGHT)
		joyStick = RIGHT;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	08 95       	ret
	else if(btn & PB_UP)
		joyStick = UP;
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	08 95       	ret
	else if(btn & PB_SEL)
		joyStick = SEL;
 1ca:	84 e0       	ldi	r24, 0x04	; 4
 1cc:	08 95       	ret
	else if(btn & PB_LEFT)
		joyStick = LEFT;
 1ce:	83 e0       	ldi	r24, 0x03	; 3
	
	return joyStick;
 1d0:	08 95       	ret

000001d2 <lcd_sendCommand>:
	}
}

///Send Command to LCD - Position, Clear, Etc.
void lcd_sendCommand(uint8_t data)
{
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
	
	//Enable High
	LCD_PORT_CTL |= EN_PIN;
 1d6:	d8 9a       	sbi	0x1b, 0	; 27
	LCD_PORT_CTL &= ~(RW_PIN | RS_PIN); // Write Command
 1d8:	9b b3       	in	r25, 0x1b	; 27
 1da:	99 7f       	andi	r25, 0xF9	; 249
 1dc:	9b bb       	out	0x1b, r25	; 27

	//Send High nibble
	LCD_PORT_DATA |= lcd_revC(data);;
 1de:	c2 e6       	ldi	r28, 0x62	; 98
 1e0:	d0 e0       	ldi	r29, 0x00	; 0
 1e2:	98 81       	ld	r25, Y
 1e4:	89 2b       	or	r24, r25
 1e6:	88 83       	st	Y, r24
	Util_WaitMicros(10);
 1e8:	8a e0       	ldi	r24, 0x0A	; 10
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	cc d1       	rcall	.+920    	; 0x586 <Util_WaitMicros>
	LCD_PORT_CTL &= ~(EN_PIN); //Clock in Data
 1ee:	d8 98       	cbi	0x1b, 0	; 27
	Util_WaitMicros(10);
 1f0:	8a e0       	ldi	r24, 0x0A	; 10
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	c8 d1       	rcall	.+912    	; 0x586 <Util_WaitMicros>
	LCD_PORT_DATA = 0x00; //Clear port
 1f6:	18 82       	st	Y, r1
	
	//TODO: Poll Busy Flag

}
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <lcd_clear>:


///Clear LCD Screen
void lcd_clear(void)
{
	lcd_sendCommand(HD_LCD_CLEAR);
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	e8 cf       	rjmp	.-48     	; 0x1d2 <lcd_sendCommand>
 202:	08 95       	ret

00000204 <lcd_init>:

/// Initialize PORTF0:7 and PORTA0:2 to Communicate with LCD
void lcd_init(void)
{
	//Set port to output
	DDRF  |= 0xFF; //Pins 0 - 7
 204:	e1 e6       	ldi	r30, 0x61	; 97
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	8f ef       	ldi	r24, 0xFF	; 255
 20c:	80 83       	st	Z, r24
	DDRA &= (EN_PIN|RS_PIN| RW_PIN);	//CTL_port
 20e:	8a b3       	in	r24, 0x1a	; 26
 210:	87 70       	andi	r24, 0x07	; 7
 212:	8a bb       	out	0x1a, r24	; 26

	LCD_PORT_CTL &= ~(EN_PIN | RW_PIN | RS_PIN);
 214:	8b b3       	in	r24, 0x1b	; 27
 216:	88 7f       	andi	r24, 0xF8	; 248
 218:	8b bb       	out	0x1b, r24	; 27

	//Delay 40msec after power applied
	Util_WaitMillis(40);
 21a:	88 e2       	ldi	r24, 0x28	; 40
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	9a d1       	rcall	.+820    	; 0x554 <Util_WaitMillis>

	//Wake up
	lcd_sendCommand(0x30);
 220:	80 e3       	ldi	r24, 0x30	; 48
 222:	d7 df       	rcall	.-82     	; 0x1d2 <lcd_sendCommand>
	Util_WaitMillis(5);
 224:	85 e0       	ldi	r24, 0x05	; 5
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	95 d1       	rcall	.+810    	; 0x554 <Util_WaitMillis>

	lcd_sendCommand(0x30);
 22a:	80 e3       	ldi	r24, 0x30	; 48
 22c:	d2 df       	rcall	.-92     	; 0x1d2 <lcd_sendCommand>
	Util_WaitMicros(160);
 22e:	80 ea       	ldi	r24, 0xA0	; 160
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	a9 d1       	rcall	.+850    	; 0x586 <Util_WaitMicros>

	lcd_sendCommand(0x30);
 234:	80 e3       	ldi	r24, 0x30	; 48
 236:	cd df       	rcall	.-102    	; 0x1d2 <lcd_sendCommand>
	Util_WaitMicros(160);
 238:	80 ea       	ldi	r24, 0xA0	; 160
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	a4 d1       	rcall	.+840    	; 0x586 <Util_WaitMicros>

	lcd_sendCommand(0x38);			//Function set 8 bit / 2line
 23e:	88 e3       	ldi	r24, 0x38	; 56
 240:	c8 df       	rcall	.-112    	; 0x1d2 <lcd_sendCommand>
	Util_WaitMillis(1);
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	86 d1       	rcall	.+780    	; 0x554 <Util_WaitMillis>

	//lcd_sendCommand(0x28);			//Function 4 bit / 2 lines
	//Util_WaitMillis(1);

	lcd_sendCommand(0x10);			//Set cursor
 248:	80 e1       	ldi	r24, 0x10	; 16
 24a:	c3 df       	rcall	.-122    	; 0x1d2 <lcd_sendCommand>
	Util_WaitMillis(1);
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	81 d1       	rcall	.+770    	; 0x554 <Util_WaitMillis>

	lcd_sendCommand(HD_BLINK_ON | HD_CURSOR_ON | HD_DISPLAY_ON);
 252:	87 e0       	ldi	r24, 0x07	; 7
 254:	be df       	rcall	.-132    	; 0x1d2 <lcd_sendCommand>
	//lcd_sendCommand(0x0C);
	Util_WaitMillis(1);
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	7c d1       	rcall	.+760    	; 0x554 <Util_WaitMillis>

	lcd_sendCommand(0x06);			//Increment Cursor / No Display Shift
 25c:	86 e0       	ldi	r24, 0x06	; 6
 25e:	b9 df       	rcall	.-142    	; 0x1d2 <lcd_sendCommand>
	Util_WaitMillis(1);
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	77 d1       	rcall	.+750    	; 0x554 <Util_WaitMillis>


	lcd_sendCommand(0x01);			//Return Home
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	b4 df       	rcall	.-152    	; 0x1d2 <lcd_sendCommand>
	Util_WaitMillis(10);
 26a:	8a e0       	ldi	r24, 0x0A	; 10
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	72 d1       	rcall	.+740    	; 0x554 <Util_WaitMillis>

	lcd_clear();
 270:	c6 df       	rcall	.-116    	; 0x1fe <lcd_clear>
	Util_WaitMillis(10);
 272:	8a e0       	ldi	r24, 0x0A	; 10
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	6e c1       	rjmp	.+732    	; 0x554 <Util_WaitMillis>
 278:	08 95       	ret

0000027a <SoundPlayer_SendCommand>:
void SoundPlayer_Stop(SoundPlayer *sp) {
	SoundPlayer_SendCommand(sp, SP_STOP);
}

void SoundPlayer_SetVolume(SoundPlayer *sp, uint8_t vol) {
	SoundPlayer_SetVolume(sp, SP_VOL(vol));
 27a:	cf 92       	push	r12
 27c:	df 92       	push	r13
 27e:	ef 92       	push	r14
 280:	ff 92       	push	r15
 282:	0f 93       	push	r16
 284:	1f 93       	push	r17
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	ec 01       	movw	r28, r24
 28c:	6b 01       	movw	r12, r22
 28e:	e8 81       	ld	r30, Y
 290:	f9 81       	ldd	r31, Y+1	; 0x01
 292:	40 81       	ld	r20, Z
 294:	21 e0       	ldi	r18, 0x01	; 1
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	c9 01       	movw	r24, r18
 29a:	0c 80       	ldd	r0, Y+4	; 0x04
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <SoundPlayer_SendCommand+0x28>
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	0a 94       	dec	r0
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <SoundPlayer_SendCommand+0x24>
 2a6:	80 95       	com	r24
 2a8:	84 23       	and	r24, r20
 2aa:	80 83       	st	Z, r24
 2ac:	88 ee       	ldi	r24, 0xE8	; 232
 2ae:	93 e0       	ldi	r25, 0x03	; 3
 2b0:	6a d1       	rcall	.+724    	; 0x586 <Util_WaitMicros>
 2b2:	dd 20       	and	r13, r13
 2b4:	7c f4       	brge	.+30     	; 0x2d4 <SoundPlayer_SendCommand+0x5a>
 2b6:	e8 81       	ld	r30, Y
 2b8:	f9 81       	ldd	r31, Y+1	; 0x01
 2ba:	40 81       	ld	r20, Z
 2bc:	21 e0       	ldi	r18, 0x01	; 1
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	c9 01       	movw	r24, r18
 2c2:	0b 80       	ldd	r0, Y+3	; 0x03
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <SoundPlayer_SendCommand+0x50>
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	0a 94       	dec	r0
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <SoundPlayer_SendCommand+0x4c>
 2ce:	84 2b       	or	r24, r20
 2d0:	80 83       	st	Z, r24
 2d2:	0e c0       	rjmp	.+28     	; 0x2f0 <SoundPlayer_SendCommand+0x76>
 2d4:	e8 81       	ld	r30, Y
 2d6:	f9 81       	ldd	r31, Y+1	; 0x01
 2d8:	20 81       	ld	r18, Z
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0b 80       	ldd	r0, Y+3	; 0x03
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <SoundPlayer_SendCommand+0x6c>
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	0a 94       	dec	r0
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <SoundPlayer_SendCommand+0x68>
 2ea:	80 95       	com	r24
 2ec:	82 23       	and	r24, r18
 2ee:	80 83       	st	Z, r24
 2f0:	88 ee       	ldi	r24, 0xE8	; 232
 2f2:	93 e0       	ldi	r25, 0x03	; 3
 2f4:	48 d1       	rcall	.+656    	; 0x586 <Util_WaitMicros>
 2f6:	e8 81       	ld	r30, Y
 2f8:	f9 81       	ldd	r31, Y+1	; 0x01
 2fa:	40 81       	ld	r20, Z
 2fc:	21 e0       	ldi	r18, 0x01	; 1
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	c9 01       	movw	r24, r18
 302:	0c 80       	ldd	r0, Y+4	; 0x04
 304:	02 c0       	rjmp	.+4      	; 0x30a <SoundPlayer_SendCommand+0x90>
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	0a 94       	dec	r0
 30c:	e2 f7       	brpl	.-8      	; 0x306 <SoundPlayer_SendCommand+0x8c>
 30e:	84 2b       	or	r24, r20
 310:	80 83       	st	Z, r24
 312:	0e e0       	ldi	r16, 0x0E	; 14
 314:	10 e0       	ldi	r17, 0x00	; 0
 316:	ee 24       	eor	r14, r14
 318:	e3 94       	inc	r14
 31a:	f1 2c       	mov	r15, r1
 31c:	88 ec       	ldi	r24, 0xC8	; 200
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	32 d1       	rcall	.+612    	; 0x586 <Util_WaitMicros>
 322:	e8 81       	ld	r30, Y
 324:	f9 81       	ldd	r31, Y+1	; 0x01
 326:	20 81       	ld	r18, Z
 328:	c7 01       	movw	r24, r14
 32a:	0c 80       	ldd	r0, Y+4	; 0x04
 32c:	02 c0       	rjmp	.+4      	; 0x332 <SoundPlayer_SendCommand+0xb8>
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	0a 94       	dec	r0
 334:	e2 f7       	brpl	.-8      	; 0x32e <SoundPlayer_SendCommand+0xb4>
 336:	80 95       	com	r24
 338:	82 23       	and	r24, r18
 33a:	80 83       	st	Z, r24
 33c:	c7 01       	movw	r24, r14
 33e:	00 2e       	mov	r0, r16
 340:	02 c0       	rjmp	.+4      	; 0x346 <SoundPlayer_SendCommand+0xcc>
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	0a 94       	dec	r0
 348:	e2 f7       	brpl	.-8      	; 0x342 <SoundPlayer_SendCommand+0xc8>
 34a:	8c 21       	and	r24, r12
 34c:	9d 21       	and	r25, r13
 34e:	89 2b       	or	r24, r25
 350:	69 f0       	breq	.+26     	; 0x36c <SoundPlayer_SendCommand+0xf2>
 352:	e8 81       	ld	r30, Y
 354:	f9 81       	ldd	r31, Y+1	; 0x01
 356:	20 81       	ld	r18, Z
 358:	c7 01       	movw	r24, r14
 35a:	0b 80       	ldd	r0, Y+3	; 0x03
 35c:	02 c0       	rjmp	.+4      	; 0x362 <SoundPlayer_SendCommand+0xe8>
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	0a 94       	dec	r0
 364:	e2 f7       	brpl	.-8      	; 0x35e <SoundPlayer_SendCommand+0xe4>
 366:	82 2b       	or	r24, r18
 368:	80 83       	st	Z, r24
 36a:	0d c0       	rjmp	.+26     	; 0x386 <SoundPlayer_SendCommand+0x10c>
 36c:	e8 81       	ld	r30, Y
 36e:	f9 81       	ldd	r31, Y+1	; 0x01
 370:	20 81       	ld	r18, Z
 372:	c7 01       	movw	r24, r14
 374:	0b 80       	ldd	r0, Y+3	; 0x03
 376:	02 c0       	rjmp	.+4      	; 0x37c <SoundPlayer_SendCommand+0x102>
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	0a 94       	dec	r0
 37e:	e2 f7       	brpl	.-8      	; 0x378 <SoundPlayer_SendCommand+0xfe>
 380:	80 95       	com	r24
 382:	82 23       	and	r24, r18
 384:	80 83       	st	Z, r24
 386:	88 ec       	ldi	r24, 0xC8	; 200
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	fd d0       	rcall	.+506    	; 0x586 <Util_WaitMicros>
 38c:	e8 81       	ld	r30, Y
 38e:	f9 81       	ldd	r31, Y+1	; 0x01
 390:	20 81       	ld	r18, Z
 392:	c7 01       	movw	r24, r14
 394:	0c 80       	ldd	r0, Y+4	; 0x04
 396:	02 c0       	rjmp	.+4      	; 0x39c <SoundPlayer_SendCommand+0x122>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	0a 94       	dec	r0
 39e:	e2 f7       	brpl	.-8      	; 0x398 <SoundPlayer_SendCommand+0x11e>
 3a0:	82 2b       	or	r24, r18
 3a2:	80 83       	st	Z, r24
 3a4:	01 50       	subi	r16, 0x01	; 1
 3a6:	11 09       	sbc	r17, r1
 3a8:	08 f0       	brcs	.+2      	; 0x3ac <SoundPlayer_SendCommand+0x132>
 3aa:	b8 cf       	rjmp	.-144    	; 0x31c <SoundPlayer_SendCommand+0xa2>
 3ac:	df 91       	pop	r29
 3ae:	cf 91       	pop	r28
 3b0:	1f 91       	pop	r17
 3b2:	0f 91       	pop	r16
 3b4:	ff 90       	pop	r15
 3b6:	ef 90       	pop	r14
 3b8:	df 90       	pop	r13
 3ba:	cf 90       	pop	r12
 3bc:	08 95       	ret

000003be <SoundPlayer_SetTrack>:
 3be:	61 15       	cp	r22, r1
 3c0:	22 e0       	ldi	r18, 0x02	; 2
 3c2:	72 07       	cpc	r23, r18
 3c4:	10 f0       	brcs	.+4      	; 0x3ca <SoundPlayer_SetTrack+0xc>
 3c6:	6f ef       	ldi	r22, 0xFF	; 255
 3c8:	71 e0       	ldi	r23, 0x01	; 1
 3ca:	57 cf       	rjmp	.-338    	; 0x27a <SoundPlayer_SendCommand>
 3cc:	08 95       	ret

000003ce <SoundPlayer_Play>:
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	ec 01       	movw	r28, r24
 3d4:	6e ef       	ldi	r22, 0xFE	; 254
 3d6:	7f ef       	ldi	r23, 0xFF	; 255
 3d8:	50 df       	rcall	.-352    	; 0x27a <SoundPlayer_SendCommand>
 3da:	62 e3       	ldi	r22, 0x32	; 50
 3dc:	70 e0       	ldi	r23, 0x00	; 0
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	e3 d0       	rcall	.+454    	; 0x5a8 <Util_BlockWhile>
 3e2:	e8 81       	ld	r30, Y
 3e4:	f9 81       	ldd	r31, Y+1	; 0x01
 3e6:	32 97       	sbiw	r30, 0x02	; 2
 3e8:	80 81       	ld	r24, Z
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0d 80       	ldd	r0, Y+5	; 0x05
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <SoundPlayer_Play+0x26>
 3f0:	95 95       	asr	r25
 3f2:	87 95       	ror	r24
 3f4:	0a 94       	dec	r0
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <SoundPlayer_Play+0x22>
 3f8:	21 e0       	ldi	r18, 0x01	; 1
 3fa:	82 27       	eor	r24, r18
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	70 e0       	ldi	r23, 0x00	; 0
 400:	81 70       	andi	r24, 0x01	; 1
 402:	d2 d0       	rcall	.+420    	; 0x5a8 <Util_BlockWhile>
 404:	81 11       	cpse	r24, r1
 406:	ed cf       	rjmp	.-38     	; 0x3e2 <SoundPlayer_Play+0x14>
 408:	e8 81       	ld	r30, Y
 40a:	f9 81       	ldd	r31, Y+1	; 0x01
 40c:	21 e0       	ldi	r18, 0x01	; 1
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	0d 80       	ldd	r0, Y+5	; 0x05
 412:	02 c0       	rjmp	.+4      	; 0x418 <SoundPlayer_Play+0x4a>
 414:	22 0f       	add	r18, r18
 416:	33 1f       	adc	r19, r19
 418:	0a 94       	dec	r0
 41a:	e2 f7       	brpl	.-8      	; 0x414 <SoundPlayer_Play+0x46>
 41c:	32 97       	sbiw	r30, 0x02	; 2
 41e:	80 81       	ld	r24, Z
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	82 23       	and	r24, r18
 424:	93 23       	and	r25, r19
 426:	89 2b       	or	r24, r25
 428:	d1 f7       	brne	.-12     	; 0x41e <SoundPlayer_Play+0x50>
 42a:	8a e0       	ldi	r24, 0x0A	; 10
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	92 d0       	rcall	.+292    	; 0x554 <Util_WaitMillis>
 430:	df 91       	pop	r29
 432:	cf 91       	pop	r28
 434:	08 95       	ret

00000436 <SoundPlayer_Reset>:
}

void SoundPlayer_Reset(SoundPlayer *sp) {
 436:	0f 93       	push	r16
 438:	1f 93       	push	r17
 43a:	cf 93       	push	r28
 43c:	df 93       	push	r29
 43e:	ec 01       	movw	r28, r24
	CLEAR_BIT(sp->port, sp->resetPin);
 440:	e8 81       	ld	r30, Y
 442:	f9 81       	ldd	r31, Y+1	; 0x01
 444:	20 81       	ld	r18, Z
 446:	01 e0       	ldi	r16, 0x01	; 1
 448:	10 e0       	ldi	r17, 0x00	; 0
 44a:	c8 01       	movw	r24, r16
 44c:	0a 80       	ldd	r0, Y+2	; 0x02
 44e:	02 c0       	rjmp	.+4      	; 0x454 <SoundPlayer_Reset+0x1e>
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	0a 94       	dec	r0
 456:	e2 f7       	brpl	.-8      	; 0x450 <SoundPlayer_Reset+0x1a>
 458:	80 95       	com	r24
 45a:	82 23       	and	r24, r18
 45c:	80 83       	st	Z, r24
	
	Util_WaitMillis(100);
 45e:	84 e6       	ldi	r24, 0x64	; 100
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	78 d0       	rcall	.+240    	; 0x554 <Util_WaitMillis>
	
	SET_BIT(sp->port, sp->resetPin);
 464:	e8 81       	ld	r30, Y
 466:	f9 81       	ldd	r31, Y+1	; 0x01
 468:	80 81       	ld	r24, Z
 46a:	0a 80       	ldd	r0, Y+2	; 0x02
 46c:	02 c0       	rjmp	.+4      	; 0x472 <SoundPlayer_Reset+0x3c>
 46e:	00 0f       	add	r16, r16
 470:	11 1f       	adc	r17, r17
 472:	0a 94       	dec	r0
 474:	e2 f7       	brpl	.-8      	; 0x46e <SoundPlayer_Reset+0x38>
 476:	08 2b       	or	r16, r24
 478:	00 83       	st	Z, r16
	
	Util_WaitMillis(800);
 47a:	80 e2       	ldi	r24, 0x20	; 32
 47c:	93 e0       	ldi	r25, 0x03	; 3
 47e:	6a d0       	rcall	.+212    	; 0x554 <Util_WaitMillis>
}
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	1f 91       	pop	r17
 486:	0f 91       	pop	r16
 488:	08 95       	ret

0000048a <SoundPlayer_Init>:
 * Created: 11/11/2015 3:47:14 PM
 *  Author: Eric
 */ 
#include "SoundPlayer.h"

void SoundPlayer_Init(SoundPlayer *sp, volatile uint8_t *port, uint8_t resetPin, uint8_t dataPin, uint8_t clockPin, uint8_t busyPin) {
 48a:	ef 92       	push	r14
 48c:	ff 92       	push	r15
 48e:	0f 93       	push	r16
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	ec 01       	movw	r28, r24
 496:	fb 01       	movw	r30, r22
	sp->port = port;
 498:	79 83       	std	Y+1, r23	; 0x01
 49a:	68 83       	st	Y, r22
	sp->dataPin = dataPin;
 49c:	2b 83       	std	Y+3, r18	; 0x03
	sp->resetPin = resetPin;
 49e:	4a 83       	std	Y+2, r20	; 0x02
	sp->clockPin = clockPin;
 4a0:	0c 83       	std	Y+4, r16	; 0x04
	sp->busyPin = busyPin;
 4a2:	ed 82       	std	Y+5, r14	; 0x05
	
	//DDR register is adjacent to the associated PORT
	SET_BIT(&DDRD, resetPin);
 4a4:	31 b3       	in	r19, 0x11	; 17
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	bc 01       	movw	r22, r24
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <SoundPlayer_Init+0x28>
 4ae:	66 0f       	add	r22, r22
 4b0:	77 1f       	adc	r23, r23
 4b2:	4a 95       	dec	r20
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <SoundPlayer_Init+0x24>
 4b6:	ab 01       	movw	r20, r22
 4b8:	43 2b       	or	r20, r19
 4ba:	41 bb       	out	0x11, r20	; 17
	SET_BIT(&DDRD, dataPin);
 4bc:	41 b3       	in	r20, 0x11	; 17
 4be:	bc 01       	movw	r22, r24
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <SoundPlayer_Init+0x3c>
 4c2:	66 0f       	add	r22, r22
 4c4:	77 1f       	adc	r23, r23
 4c6:	2a 95       	dec	r18
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <SoundPlayer_Init+0x38>
 4ca:	9b 01       	movw	r18, r22
 4cc:	34 2f       	mov	r19, r20
 4ce:	32 2b       	or	r19, r18
 4d0:	31 bb       	out	0x11, r19	; 17
	CLEAR_BIT(&DDRD, busyPin);
 4d2:	31 b3       	in	r19, 0x11	; 17
 4d4:	ac 01       	movw	r20, r24
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <SoundPlayer_Init+0x52>
 4d8:	44 0f       	add	r20, r20
 4da:	55 1f       	adc	r21, r21
 4dc:	ea 94       	dec	r14
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <SoundPlayer_Init+0x4e>
 4e0:	7a 01       	movw	r14, r20
 4e2:	e0 94       	com	r14
 4e4:	3e 21       	and	r19, r14
 4e6:	31 bb       	out	0x11, r19	; 17
	
	SET_BIT(&DDRD, clockPin);
 4e8:	31 b3       	in	r19, 0x11	; 17
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <SoundPlayer_Init+0x66>
 4ec:	88 0f       	add	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	0a 95       	dec	r16
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <SoundPlayer_Init+0x62>
 4f4:	93 2f       	mov	r25, r19
 4f6:	98 2b       	or	r25, r24
 4f8:	91 bb       	out	0x11, r25	; 17
	SET_BIT(port, clockPin);
 4fa:	90 81       	ld	r25, Z
 4fc:	89 2b       	or	r24, r25
 4fe:	80 83       	st	Z, r24
	CLEAR_BIT(port, dataPin);
 500:	80 81       	ld	r24, Z
 502:	20 95       	com	r18
 504:	28 23       	and	r18, r24
 506:	20 83       	st	Z, r18
	CLEAR_BIT(port, busyPin);
 508:	80 81       	ld	r24, Z
 50a:	e8 22       	and	r14, r24
 50c:	e0 82       	st	Z, r14
	
	Util_Init();
 50e:	0b d0       	rcall	.+22     	; 0x526 <Util_Init>
	
	Util_WaitMillis(10);
 510:	8a e0       	ldi	r24, 0x0A	; 10
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	1f d0       	rcall	.+62     	; 0x554 <Util_WaitMillis>
	SoundPlayer_Reset(sp);
 516:	ce 01       	movw	r24, r28
 518:	8e df       	rcall	.-228    	; 0x436 <SoundPlayer_Reset>
	
}
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
 51e:	0f 91       	pop	r16
 520:	ff 90       	pop	r15
 522:	ef 90       	pop	r14
 524:	08 95       	ret

00000526 <Util_Init>:

volatile unsigned long ms;

void Util_Init(void)
{
	cli();
 526:	f8 94       	cli
	
	TCCR0 = (1<<CS02);	//clk/8 for 1MHZ internal
 528:	84 e0       	ldi	r24, 0x04	; 4
 52a:	83 bf       	out	0x33, r24	; 51
	OCR0 = 250; 
 52c:	8a ef       	ldi	r24, 0xFA	; 250
 52e:	81 bf       	out	0x31, r24	; 49
	TIMSK |= (1<<OCIE0);  
 530:	87 b7       	in	r24, 0x37	; 55
 532:	82 60       	ori	r24, 0x02	; 2
 534:	87 bf       	out	0x37, r24	; 55
	
	TCCR1A = 0X00; //Timer stopped
 536:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0X00;
 538:	1e bc       	out	0x2e, r1	; 46
	
	//TIMSK |=  (1<<OCIE2);
	
	sei();
 53a:	78 94       	sei
 53c:	08 95       	ret

0000053e <Util_GetMillis>:
}

unsigned long Util_GetMillis() {
	unsigned long millis;
	
	cli();
 53e:	f8 94       	cli
	millis = ms;
 540:	60 91 04 01 	lds	r22, 0x0104
 544:	70 91 05 01 	lds	r23, 0x0105
 548:	80 91 06 01 	lds	r24, 0x0106
 54c:	90 91 07 01 	lds	r25, 0x0107
	sei();
 550:	78 94       	sei
	
	return millis;
}
 552:	08 95       	ret

00000554 <Util_WaitMillis>:

void Util_WaitMillis(unsigned int millis) {
 554:	cf 92       	push	r12
 556:	df 92       	push	r13
 558:	ef 92       	push	r14
 55a:	ff 92       	push	r15
 55c:	7c 01       	movw	r14, r24
	unsigned long endTime = millis + Util_GetMillis();
 55e:	ef df       	rcall	.-34     	; 0x53e <Util_GetMillis>
 560:	9b 01       	movw	r18, r22
 562:	ac 01       	movw	r20, r24
 564:	2e 0d       	add	r18, r14
 566:	3f 1d       	adc	r19, r15
 568:	41 1d       	adc	r20, r1
 56a:	51 1d       	adc	r21, r1
 56c:	69 01       	movw	r12, r18
 56e:	7a 01       	movw	r14, r20
	
	while(Util_GetMillis() < endTime);
 570:	e6 df       	rcall	.-52     	; 0x53e <Util_GetMillis>
 572:	6c 15       	cp	r22, r12
 574:	7d 05       	cpc	r23, r13
 576:	8e 05       	cpc	r24, r14
 578:	9f 05       	cpc	r25, r15
 57a:	d0 f3       	brcs	.-12     	; 0x570 <Util_WaitMillis+0x1c>
}
 57c:	ff 90       	pop	r15
 57e:	ef 90       	pop	r14
 580:	df 90       	pop	r13
 582:	cf 90       	pop	r12
 584:	08 95       	ret

00000586 <Util_WaitMicros>:

void Util_WaitMicros(unsigned int micros) {
	uint16_t end = micros << 1;
 586:	88 0f       	add	r24, r24
 588:	99 1f       	adc	r25, r25
	
	TCNT3 = 0;
 58a:	10 92 89 00 	sts	0x0089, r1
 58e:	10 92 88 00 	sts	0x0088, r1
	TCCR3B = (1 << CS21); // No prescalar for 1MHZ clk.
 592:	22 e0       	ldi	r18, 0x02	; 2
 594:	20 93 8a 00 	sts	0x008A, r18
	
	while(TCNT3 < end)
 598:	e8 e8       	ldi	r30, 0x88	; 136
 59a:	f0 e0       	ldi	r31, 0x00	; 0
 59c:	20 81       	ld	r18, Z
 59e:	31 81       	ldd	r19, Z+1	; 0x01
 5a0:	28 17       	cp	r18, r24
 5a2:	39 07       	cpc	r19, r25
 5a4:	d8 f3       	brcs	.-10     	; 0x59c <Util_WaitMicros+0x16>
	{
		//SET_BIT(&DEBUGPORT, 0); //Debug1
	}
	//CLEAR_BIT(&DEBUGPORT, 0);
	//
}
 5a6:	08 95       	ret

000005a8 <Util_BlockWhile>:

//Call once with a non-zero timeout to start the timer
//Then each subsequent call with a zero timeout value
//will return true if condition and the time since the first
//call is less than the timeout amount, otherwise false
uint8_t Util_BlockWhile(uint8_t condition, uint16_t timeout) {
 5a8:	cf 92       	push	r12
 5aa:	df 92       	push	r13
 5ac:	ef 92       	push	r14
 5ae:	ff 92       	push	r15
 5b0:	0f 93       	push	r16
 5b2:	1f 93       	push	r17
 5b4:	cf 93       	push	r28
 5b6:	c8 2f       	mov	r28, r24
 5b8:	8b 01       	movw	r16, r22
	static uint32_t endTime = 0;
	//uint32_t startTime = Util_GetMillis();
	
	if(timeout) {
 5ba:	61 15       	cp	r22, r1
 5bc:	71 05       	cpc	r23, r1
 5be:	79 f0       	breq	.+30     	; 0x5de <Util_BlockWhile+0x36>
		endTime = Util_GetMillis() + timeout;
 5c0:	be df       	rcall	.-132    	; 0x53e <Util_GetMillis>
 5c2:	ab 01       	movw	r20, r22
 5c4:	bc 01       	movw	r22, r24
 5c6:	40 0f       	add	r20, r16
 5c8:	51 1f       	adc	r21, r17
 5ca:	61 1d       	adc	r22, r1
 5cc:	71 1d       	adc	r23, r1
 5ce:	40 93 00 01 	sts	0x0100, r20
 5d2:	50 93 01 01 	sts	0x0101, r21
 5d6:	60 93 02 01 	sts	0x0102, r22
 5da:	70 93 03 01 	sts	0x0103, r23
	}
	
	return condition && Util_GetMillis() < endTime;
 5de:	cc 23       	and	r28, r28
 5e0:	91 f0       	breq	.+36     	; 0x606 <Util_BlockWhile+0x5e>
 5e2:	ad df       	rcall	.-166    	; 0x53e <Util_GetMillis>
 5e4:	21 e0       	ldi	r18, 0x01	; 1
 5e6:	c0 90 00 01 	lds	r12, 0x0100
 5ea:	d0 90 01 01 	lds	r13, 0x0101
 5ee:	e0 90 02 01 	lds	r14, 0x0102
 5f2:	f0 90 03 01 	lds	r15, 0x0103
 5f6:	6c 15       	cp	r22, r12
 5f8:	7d 05       	cpc	r23, r13
 5fa:	8e 05       	cpc	r24, r14
 5fc:	9f 05       	cpc	r25, r15
 5fe:	08 f0       	brcs	.+2      	; 0x602 <Util_BlockWhile+0x5a>
 600:	20 e0       	ldi	r18, 0x00	; 0
 602:	82 2f       	mov	r24, r18
 604:	01 c0       	rjmp	.+2      	; 0x608 <Util_BlockWhile+0x60>
 606:	80 e0       	ldi	r24, 0x00	; 0
}
 608:	cf 91       	pop	r28
 60a:	1f 91       	pop	r17
 60c:	0f 91       	pop	r16
 60e:	ff 90       	pop	r15
 610:	ef 90       	pop	r14
 612:	df 90       	pop	r13
 614:	cf 90       	pop	r12
 616:	08 95       	ret

00000618 <__vector_15>:

ISR(TIMER0_COMP_vect) {
 618:	1f 92       	push	r1
 61a:	0f 92       	push	r0
 61c:	0f b6       	in	r0, 0x3f	; 63
 61e:	0f 92       	push	r0
 620:	11 24       	eor	r1, r1
 622:	8f 93       	push	r24
 624:	9f 93       	push	r25
 626:	af 93       	push	r26
 628:	bf 93       	push	r27
	TCNT0 = 0;
 62a:	12 be       	out	0x32, r1	; 50
	ms++;
 62c:	80 91 04 01 	lds	r24, 0x0104
 630:	90 91 05 01 	lds	r25, 0x0105
 634:	a0 91 06 01 	lds	r26, 0x0106
 638:	b0 91 07 01 	lds	r27, 0x0107
 63c:	01 96       	adiw	r24, 0x01	; 1
 63e:	a1 1d       	adc	r26, r1
 640:	b1 1d       	adc	r27, r1
 642:	80 93 04 01 	sts	0x0104, r24
 646:	90 93 05 01 	sts	0x0105, r25
 64a:	a0 93 06 01 	sts	0x0106, r26
 64e:	b0 93 07 01 	sts	0x0107, r27
	//DEBUGPORT ^= DEBUG2;
}
 652:	bf 91       	pop	r27
 654:	af 91       	pop	r26
 656:	9f 91       	pop	r25
 658:	8f 91       	pop	r24
 65a:	0f 90       	pop	r0
 65c:	0f be       	out	0x3f, r0	; 63
 65e:	0f 90       	pop	r0
 660:	1f 90       	pop	r1
 662:	18 95       	reti

00000664 <check_Input>:

//Return true if light is being blocked
uint8_t check_Input(void)
{
	uint8_t laserPin = (PINE & (1<<6));
 664:	81 b1       	in	r24, 0x01	; 1
	uint8_t isBlocked = 0;
	
	isBlocked = (laserPin ? 1 : 0);
	
	return isBlocked;
 666:	86 fb       	bst	r24, 6
 668:	88 27       	eor	r24, r24
 66a:	80 f9       	bld	r24, 0
 66c:	08 95       	ret

0000066e <_exit>:
 66e:	f8 94       	cli

00000670 <__stop_program>:
 670:	ff cf       	rjmp	.-2      	; 0x670 <__stop_program>
